import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np

# Example feature vectors and labels (replace with your own dataset)
# X_train and X_test should be feature vectors extracted from files
# y_train and y_test should be labels (1 for malware, 0 for benign)
X_train = np.random.rand(1000, 256)  # 1000 samples, each with 256 features
y_train = np.random.randint(2, size=(1000, 1))  # 1 for malware, 0 for benign
X_test = np.random.rand(200, 256)  # 200 test samples
y_test = np.random.randint(2, size=(200, 1))

# Define a simple neural network model for malware detection
model = models.Sequential()
model.add(layers.Dense(128, activation='relu', input_shape=(256,)))  # Input layer (256 features)
model.add(layers.Dense(64, activation='relu'))  # Hidden layer
model.add(layers.Dense(1, activation='sigmoid'))  # Output layer for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {test_acc}')

# Save the model
model.save('malware_detection_model.h5')

# Load the model later for predictions
# loaded_model = tf.keras.models.load_model('malware_detection_model.h5')

# Example of using the trained model for prediction on new data
new_data = np.random.rand(1, 256)  # Example of new feature vector
prediction = model.predict(new_data)
print(f'Prediction (1 = Malware, 0 = Benign): {np.round(prediction)}')